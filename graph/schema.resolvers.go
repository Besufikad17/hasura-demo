package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"github.com/besufikad17/hasura-gql-demo/graph/hasura"
	"github.com/besufikad17/hasura-gql-demo/graph/model"
)

// CreateUser is the resolver for the CreateUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	createUserInput := hasura.CreateUserArgs{
		First_name:   input.FirstName,
		Last_name:    input.LastName,
		Email:        input.Email,
		Phone_number: input.PhoneNumber,
		Password:     input.Password,
		Role:         hasura.Role(input.Role),
	}
	result, err := hasura.CreateUser(createUserInput)

	if err != nil {
		return nil, err
	} else {
		return &model.User{
			FirstName:   *result.First_name,
			LastName:    *result.Last_name,
			Email:       *result.Email,
			PhoneNumber: *result.Phone_number,
			Password:    *result.Password,
			Role:        string(result.Role),
		}, nil
	}
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
